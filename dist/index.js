var Te=Object.defineProperty;var z=(r,e)=>()=>(r&&(e=r(r=0)),e);var X=(r,e)=>{for(var t in e)Te(r,t,{get:e[t],enumerable:!0})};import{ModelClass as Q}from"@elizaos/core";function B(r){let e=j(r.getSetting("ALFAFRENS_MODEL_CLASS"));return{evaluation:{template:r.getSetting("ALFAFRENS_EVALUATION_TEMPLATE")||"",modelClass:j(r.getSetting("ALFAFRENS_EVALUATION_MODEL_CLASS"))||e},response:{template:r.getSetting("ALFAFRENS_RESPONSE_TEMPLATE")||"",modelClass:j(r.getSetting("ALFAFRENS_RESPONSE_MODEL_CLASS"))||e},post:{template:r.getSetting("ALFAFRENS_POST_TEMPLATE")||"",modelClass:j(r.getSetting("ALFAFRENS_POST_MODEL_CLASS"))||e}}}function j(r){if(r)switch(r.toUpperCase()){case"SMALL":return Q.SMALL;case"MEDIUM":return Q.MEDIUM;case"LARGE":return Q.LARGE;default:return}}var Z=z(()=>{});import{elizaLogger as p,stringToUuid as Ee,generateText as ee,ModelClass as te}from"@elizaos/core";var R,G=z(()=>{R=class{constructor(e){this.confidenceThreshold=.7;this.runtime=e}async extractFacts(e){let t=`Extract factual statements from this text. Return ONLY a JSON array of strings.
        Only include clear, factual statements, not opinions or subjective content.
        The JSON array must be properly formatted with square brackets and quoted strings.
        
        Text: "${e}"
        
        Example format:
        ["Fact 1", "Fact 2", "Fact 3"]
        `;try{let n=await ee({runtime:this.runtime,context:t,modelClass:te.SMALL});p.debug("[FactValidation] Raw fact extraction result:",n);let s=n.match(/\[.*\]/s);if(!s)return p.error("[FactValidation] No JSON array found in result:",n),this.extractFactsFallback(e);try{let a=s[0],o=JSON.parse(a);if(!Array.isArray(o))return p.error("[FactValidation] Parsed result is not an array:",o),this.extractFactsFallback(e);let c=o.filter(g=>typeof g=="string"&&g.trim().length>0);return p.debug("[FactValidation] Extracted facts:",c),c}catch(a){return p.error("[FactValidation] Failed to parse JSON:",a),this.extractFactsFallback(e)}}catch(n){return p.error("[FactValidation] Error during fact extraction:",n),this.extractFactsFallback(e)}}extractFactsFallback(e){p.debug("[FactValidation] Using fallback fact extraction");let n=e.split(/[.!?]+/).map(s=>s.trim()).filter(s=>s.length>0).filter(s=>{let a=s.includes("?")||s.toLowerCase().startsWith("what")||s.toLowerCase().startsWith("who")||s.toLowerCase().startsWith("when")||s.toLowerCase().startsWith("where")||s.toLowerCase().startsWith("why")||s.toLowerCase().startsWith("how"),o=/think|feel|believe|opinion|seem|appear|likely|possibly|maybe|perhaps/i.test(s),c=/in \d{4}|\d{4}|founded|created|established|launched|developed|built|designed|is a|was born|located|headquartered/i.test(s);return!a&&!o&&c});return p.debug("[FactValidation] Fallback extracted facts:",n),n}async validateFact(e,t){let n=await this.getRelevantFacts(e),s=await this.detectContradictions(e,n),a=this.calculateFactConfidence(e,t,s),o=await this.extractRelationships(e,t);return{confidence:a,source:t.senderId,timestamp:Date.now(),contradictions:s.map(c=>c.fact),relationships:o}}async getRelevantFacts(e){try{return(await this.runtime.messageManager.getMemories({roomId:this.runtime.agentId,count:100})).filter(n=>this.calculateSemanticSimilarity(e,n.content.text)>.5)}catch(t){return p.error("[FactValidation] Failed to get relevant facts:",t),[]}}async detectContradictions(e,t){let n=[];for(let s of t)if(this.calculateSemanticSimilarity(e,s.content.text)>.8){let o=await this.analyzeContradiction(e,s.content.text);o&&n.push({fact:e,existingFact:s.content.text,confidence:o.confidence,timestamp:Date.now()})}return n}async analyzeContradiction(e,t){let n=`Analyze if these two facts contradict each other:
        Fact 1: ${e}
        Fact 2: ${t}
        
        Return a JSON object with:
        {
            "contradicts": boolean,
            "confidence": number (0-1),
            "explanation": string
        }`;try{let s=await ee({runtime:this.runtime,context:n,modelClass:te.SMALL}),a=JSON.parse(s);if(a.contradicts&&a.confidence>.7)return{confidence:a.confidence}}catch(s){p.error("[FactValidation] Failed to analyze contradiction:",s)}return null}async extractRelationships(e,t){let n=`Extract relationships from this fact. Return them as a JSON array of objects.
        Each object should have:
        {
            "sourceEntityId": string (the subject),
            "targetEntityId": string (the object),
            "tags": string[] (relationship types)
        }
        
        Fact: "${e}"
        `;try{let s=await ee({runtime:this.runtime,context:n,modelClass:te.SMALL});return JSON.parse(s)}catch(s){return p.error("[FactValidation] Failed to extract relationships:",s),[]}}calculateFactConfidence(e,t,n){let s=.5;if(t.senderId===this.runtime.agentId&&(s+=.2),n.length>0){let a=n.reduce((o,c)=>o+c.confidence,0)/n.length;s-=a*.3}return Math.max(0,Math.min(1,s))}calculateSemanticSimilarity(e,t){let n=new Set(e.toLowerCase().split(/\s+/)),s=new Set(t.toLowerCase().split(/\s+/)),a=new Set([...n].filter(c=>s.has(c))),o=new Set([...n,...s]);return a.size/o.size}async storeFact(e,t){if(t.confidence<this.confidenceThreshold){p.debug("[FactValidation] Skipping low confidence fact:",e);return}try{let n={id:Ee(`fact-${Date.now()}`),content:{text:e,metadata:{confidence:t.confidence,source:t.source,timestamp:t.timestamp,contradictions:t.contradictions,relationships:t.relationships}},roomId:this.runtime.agentId,userId:this.runtime.agentId,agentId:this.runtime.agentId};await this.runtime.messageManager.createMemory(n)}catch(n){p.error("[FactValidation] Failed to store fact:",n)}}}});var oe={};X(oe,{DEFAULT_EVALUATION_TEMPLATE:()=>ae,DEFAULT_POST_TEMPLATE:()=>U,DEFAULT_RESPONSE_TEMPLATE:()=>re,evaluateMessage:()=>ie,generatePostContent:()=>E,generateResponse:()=>$,getNumericSetting:()=>C,parseModelClass:()=>b,processTemplate:()=>se});import{elizaLogger as d,generateText as we,ModelClass as k,ServiceType as ve}from"@elizaos/core";function se(r,e,t={}){let n=e.character,s=r.replace(/{{character\.name}}/g,n.name).replace(/{{character\.adjectives}}/g,n.adjectives.join(", ")).replace(/{{character\.topics}}/g,n.topics?.join(", ")||"");return Object.entries(t).forEach(([a,o])=>{typeof o=="object"?Object.entries(o).forEach(([c,g])=>{s=s.replace(new RegExp(`{{${a}\\.${c}}}`,"g"),String(g))}):s=s.replace(new RegExp(`{{${a}}}`,"g"),String(o))}),s}function b(r){if(r)switch(r.toUpperCase()){case"SMALL":return k.SMALL;case"MEDIUM":return k.MEDIUM;case"LARGE":return k.LARGE;default:return}}function C(r,e,t){let n=r.getSetting(e);if(!n)return t;let s=parseInt(n,10);return isNaN(s)?t:s}function be(r){return r.length===0?"No previous messages.":r.map(e=>`${e.senderId===e.senderUsername?"ASSISTANT":`USER (${e.senderUsername})`}: ${e.content}`).join(`

`)}async function ne({runtime:r,context:e,modelClass:t,logPrefix:n="[AlfaFrens]",traceId:s=""}){let a=s?` (${s})`:"";d.debug(`${n} Generating text with parameters${a}:`,{modelClass:t,contextLength:e.length,contextPreview:e.substring(0,100)+(e.length>100?"...":""),runtimeHasCharacter:!!r.character,runtimeHasModelProvider:!!r.modelProvider});try{let o=new Promise((y,u)=>{setTimeout(()=>u(new Error("LLM request timed out")),3e4)}),c=we({runtime:r,context:e,modelClass:t,stop:[`

`],customSystemPrompt:"You are a helpful assistant that responds as accurately as possible."}),g=await Promise.race([c,o]);return d.debug(`${n} Generated text${a}:`,{resultLength:g.length,resultPreview:g.substring(0,100)+(g.length>100?"...":"")}),g}catch(o){let c=o instanceof Error?o.message:String(o);throw c.includes("authentication")||c.includes("api key")?(d.error(`${n} Authentication error with API${a}:`,c),console.error(`=== LLM API AUTHENTICATION ERROR [${s||"unknown"}] ===`),console.error(c)):c.includes("timeout")?(d.error(`${n} Timeout error calling LLM API${a}:`,c),console.error(`=== LLM API TIMEOUT [${s||"unknown"}] ===`)):(d.error(`${n} Error generating text${a}:`,o),console.error(`=== LLM API ERROR [${s||"unknown"}] ===`,c)),o}}async function E(r,e){d.debug("[AlfaFrens] Starting post content generation"),d.debug("[AlfaFrens] Using template:",e.template?.substring(0,50)+"..."),d.debug("[AlfaFrens] Using model class:",e.modelClass);let t=se(e.template,r);try{let n=await ne({runtime:r,context:t,modelClass:e.modelClass,traceId:"post"});return d.info("[AlfaFrens] Generated post content:",n),n}catch(n){return d.error("[AlfaFrens] Failed to generate post content:",n),"I'm sorry, I couldn't generate a post at this time."}}async function $(r,e,t,n,s,a){let o="";try{let f=r.getService(ve.WEB_SEARCH);if(f){d.info("[AlfaFrens] Web search service found, attempting to search for: "+t);let A=await f.search(t,{limit:3,includeAnswer:!0});A&&A.results&&A.results.length>0&&(d.info("[AlfaFrens] Web search results found!"),o=`${A.answer||""}

Relevant web search results:
`,o+=A.results.map((_,w)=>`${w+1}. ${_.title} - ${_.url}`).join(`
`))}else d.warn("[AlfaFrens] Web search service not found")}catch(f){d.error("[AlfaFrens] Error using web search service:",f)}let c="";try{let f=await e.searchKnowledge(t,3);f&&f.length>0&&(c=`

Relevant knowledge:
`+f.map(A=>A.content?.text||"").filter(Boolean).join(`

`))}catch(f){d.warn("[AlfaFrens] Error fetching knowledge context:",f)}let g=be(n),u=se(s,r,{message:{content:t,history:g},websearch:o,knowledge:c}),V=await ne({runtime:r,context:u,modelClass:a||k.MEDIUM,traceId:"response"}),Y=new R(r);try{let f=await Y.extractFacts(V);if(d.debug("[AlfaFrens] Extracted facts from response:",f),f.length===0)return V;let A={id:`validation-${Date.now()}`,timestamp:new Date().toISOString(),content:V,senderId:r.agentId,senderUsername:r.character?.name||"AI Assistant"},_=!1,w=[];for(let h of f){let v=await Y.validateFact(h,A);w.push({fact:h,confidence:v.confidence,contradictions:v.contradictions}),(v.contradictions.length>0||v.confidence<.7)&&(_=!0)}if(d.debug("[AlfaFrens] Fact validation results:",w),_){d.info("[AlfaFrens] Facts require correction, enhancing prompt with factual context");let h=w.filter(S=>S.contradictions.length>0||S.confidence<.7).map(S=>S.contradictions.length>0?`CORRECTION: "${S.fact}" contradicts known facts: ${S.contradictions.join(", ")}`:`CORRECTION: "${S.fact}" has low confidence (${S.confidence.toFixed(2)})`).join(`
`),v=`${u}

Your initial response contains factual issues that need correction:
${h}

Revised response:`,Re=await ne({runtime:r,context:v,modelClass:a||k.MEDIUM,traceId:"corrected-response"});return d.info("[AlfaFrens] Generated fact-corrected response"),Re}for(let h of w)h.confidence>=.7&&h.contradictions.length===0&&await Y.storeFact(h.fact,{confidence:h.confidence,source:r.agentId,timestamp:Date.now(),contradictions:[]})}catch(f){d.error("[AlfaFrens] Error during fact validation:",f),d.warn("[AlfaFrens] Returning original response due to fact validation error")}return V}async function ie(r,e,t){let n=`eval-${e.id.substring(0,8)}-${Date.now().toString().substring(9,13)}`;return d.debug(`[EVALUATION START ${n}] Message from ${e.senderUsername}: ${e.content?.substring(0,100)}`),d.debug("[FORCE DEBUG MODE] Skipping LLM evaluation and returning TRUE"),!0}var U,re,ae,D=z(()=>{G();U=`You are {{character.name}}, an AI assistant with the following traits:
{{character.adjectives}}

Your topics of expertise include:
{{character.topics}}

TASK: Write a new post for a community channel.

RULES:
1. Write ONLY the post content
2. Do not include any meta-commentary
3. Start directly with your message
4. Keep it engaging and relevant
5. Maximum length: 2-3 sentences
6. Be concise and meaningful

POST:`,re=`You are {{character.name}}, an AI assistant with the following traits:
{{character.adjectives}}

Your topics of expertise include:
{{character.topics}}

CONVERSATION HISTORY:
{{message.history}}

USER ({{message.sender}}): {{message.content}}

TASK: Respond to the user's message.

RULES:
1. Keep responses concise (1-2 sentences)
2. Be direct and helpful
3. Stay focused on the question
4. No meta-commentary

YOUR RESPONSE:`,ae=`TASK: Decide whether the AI assistant should respond to this message.

Message: "{{message.content}}"
Sender: {{message.sender}}

INSTRUCTIONS:
You are helping me decide if the AI assistant should respond to the message above.
Consider the following:
1. Is this a substantial message that requires a response?
2. Is the message directed at the assistant?
3. Is the message a question, request for help, or engaging in conversation?
4. Is the message appropriate to respond to?

Response format:
Return a JSON array with:
1. A boolean (true/false) indicating whether to respond
2. A brief explanation for your decision

Example response:
\`\`\`json
[true, "This is a direct question that the assistant should answer"]
\`\`\`

Or:
\`\`\`json
[false, "This message is too short and doesn't require a response"]
\`\`\`
`});var Ie={};X(Ie,{createAlfaFrensActions:()=>q,registerAlfaFrensActions:()=>me});import{elizaLogger as I}from"@elizaos/core";async function Ne(r,e,t=5){try{let s=e.content.inReplyTo;if(!s)return[];let a=await r.getMessages({roomId:r.config.channelId,until:Date.now(),includeReplies:!0}),o=[],c=a.find(g=>g.id===s);for(;c&&o.length<t&&(o.unshift(c),c.replyTo);)c=a.find(g=>g.id===c.replyTo);return o}catch(n){return I.error("[AlfaFrensAction] failed to get message history:",n),[]}}function q(r,e){let t=B(e);return[{name:"ALFAFRENS_CREATE_POST",description:"creates a new post in the AlfaFrens channel",similes:["post","share","announce","publish"],examples:[[{user:"{{user1}}",content:{text:"create a new post about community updates"}},{user:"{{user2}}",content:{text:"Exciting new features coming to our platform! Stay tuned for updates.",action:"ALFAFRENS_CREATE_POST"}}]],validate:async(n,s)=>!0,handler:async(n,s)=>{try{let a=s.content.text||await E(n,t.post);return I.debug("[AlfaFrensAction] creating post with content:",a),await r.createPost({content:a,roomId:r.config.channelId}),I.info("[AlfaFrensAction] post created successfully"),!0}catch(a){return I.error("[AlfaFrensAction] failed to create post:",a),!1}}},{name:"ALFAFRENS_RESPOND",description:"responds to a message in the AlfaFrens channel",similes:["reply","answer","respond"],examples:[[{user:"{{user1}}",content:{text:"What's the latest update?"}},{user:"{{user2}}",content:{text:"We've just launched new features! Check them out.",action:"ALFAFRENS_RESPOND"}}]],validate:async(n,s)=>!0,handler:async(n,s)=>{try{let a=s.content,o=await Ne(r,s),c=a.text||await $(n,r,a.text||"",o,t.response.template,t.response.modelClass);return I.debug("[AlfaFrensAction] sending response:",{contentLength:c.length,replyTo:a.inReplyTo}),await r.sendMessage({content:c,roomId:r.config.channelId,inReplyTo:a.inReplyTo}),I.info("[AlfaFrensAction] response sent successfully"),!0}catch(a){return I.error("[AlfaFrensAction] failed to send response:",a),!1}}}]}function me(r,e){let t=q(r,e);I.debug(`[AlfaFrensActions] registering ${t.length} actions`),t.forEach(n=>{e.registerAction(n)}),I.info("[AlfaFrensActions] actions registered successfully")}var fe=z(()=>{D();Z()});import{elizaLogger as l,stringToUuid as Oe}from"@elizaos/core";import{elizaLogger as F}from"@elizaos/core";var N=class{constructor(e,t,n){this.apiKey=e;this.channelId=t;F.debug("[AlfaFrensApi] constructor called with channelId:",t),this.baseUrl=n||process.env.ALFAFRENS_API_URL||"https://friendx-git-ai-api.preview.superfluid.finance",F.debug("[AlfaFrensApi] using baseUrl:",this.baseUrl)}async fetch(e,t={}){F.debug("[AlfaFrensApi] fetch called with path:",e);let n=await fetch(`${this.baseUrl}${e}`,{...t,headers:{"x-api-key":this.apiKey,"Content-Type":"application/json",...t.headers}});if(F.debug("[AlfaFrensApi] fetch response status:",n.status),!n.ok){let a=await n.text();throw console.error("[AlfaFrensApi] API Error:",{status:n.status,statusText:n.statusText,body:a}),new Error(`API request failed: ${n.statusText}`)}let s=await n.json();return F.debug("[AlfaFrensApi] fetch response data type:",Array.isArray(s)?`Array[${s.length}]`:typeof s),s}async getMessages(e={}){F.debug("[AlfaFrensApi] getMessages called with options:",e);try{let t=`/api/ai/getChannelMessages?since=${e.since||Date.now()-36e5}`;if(e.until&&(t+=`&until=${e.until}`),e.includeReactions||e.includeReplies){let s=[];e.includeReactions&&s.push("reactions"),e.includeReplies&&(s=["reactions","replies"]),s.length>0&&(t+="&include="+s.join(","))}F.debug("[AlfaFrensApi] Fetching messages with URL:",t);let n=await this.fetch(t);return n.length>0&&F.debug(`[AlfaFrensApi] Retrieved ${n.length} messages`),n}catch(t){throw console.error("[AlfaFrensApi] Error retrieving messages:",t),F.error("[AlfaFrensApi] Failed to get messages:",t),t}}async sendMessage(e){return this.sendMessageWithOptions(e)}async replyMessage(e,t){return this.sendMessageWithOptions(e,t)}async createPost(e){return this.sendMessageWithOptions(e)}async sendMessageWithOptions(e,t){try{let n={content:e.trim()};return t&&(n.replyToPostId=t),await this.fetch("/api/ai/postMessage",{method:"POST",body:JSON.stringify(n)})}catch(n){throw console.error("[AlfaFrensApi] Error sending message:",n),n}}};Z();function O(r){return{id:r.message.id,userId:r.senderId,agentId:r.runtime.agentId,content:{text:r.message.content||"",action:r.isBotMessage?"ALFAFRENS_SEND_MESSAGE":void 0},roomId:r.roomId}}import{elizaLogger as i,ModelClass as Le,generateText as _e,stringToUuid as he}from"@elizaos/core";G();D();G();import{elizaLogger as T}from"@elizaos/core";var m=[];for(let r=0;r<256;++r)m.push((r+256).toString(16).slice(1));function Ae(r,e=0){return(m[r[e+0]]+m[r[e+1]]+m[r[e+2]]+m[r[e+3]]+"-"+m[r[e+4]]+m[r[e+5]]+"-"+m[r[e+6]]+m[r[e+7]]+"-"+m[r[e+8]]+m[r[e+9]]+"-"+m[r[e+10]]+m[r[e+11]]+m[r[e+12]]+m[r[e+13]]+m[r[e+14]]+m[r[e+15]]).toLowerCase()}import{randomFillSync as Ce}from"crypto";var W=new Uint8Array(256),H=W.length;function ce(){return H>W.length-16&&(Ce(W),H=0),W.slice(H,H+=16)}import{randomUUID as Pe}from"crypto";var le={randomUUID:Pe};function xe(r,e,t){if(le.randomUUID&&!e&&!r)return le.randomUUID();r=r||{};let n=r.random??r.rng?.()??ce();if(n.length<16)throw new Error("Random bytes length must be >= 16");if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,e){if(t=t||0,t<0||t+16>e.length)throw new RangeError(`UUID byte range ${t}:${t+15} is out of buffer bounds`);for(let s=0;s<16;++s)e[t+s]=n[s];return e}return Ae(n)}var ge=xe;var P=class{constructor(e){this.tasks=new Map;this.intervals=new Map;this.isRunning=!1;this.runtime=e,this.factValidationManager=new R(e),T.debug("[AlfaFrensTaskManager] Initialized")}registerTaskWorkers(){this.runtime.registerTaskWorker({name:"FACT_VALIDATION",validate:async(e,t,n)=>t.userId!==e.agentId,execute:async(e,t,n)=>{let s=n,a=await this.factValidationManager.validateFact(s.metadata.fact,{id:n.id,timestamp:new Date().toISOString(),senderId:s.metadata.source,senderUsername:s.metadata.source,content:s.metadata.fact});a.confidence>=.7&&await this.factValidationManager.storeFact(s.metadata.fact,a),await e.deleteTask(n.id)}}),this.runtime.registerTaskWorker({name:"AI_INTERACTION",validate:async(e,t,n)=>{let s=await e.getTask(t.id);if(!s)return!1;let a=s;return Date.now()-a.metadata.lastProcessed>=a.metadata.interval},execute:async(e,t,n)=>{let s=n;switch(s.metadata.type){case"POLL":break;case"POST":break;case"RESPONSE":break}await e.updateTask(n.id,{metadata:{...s.metadata,lastProcessed:Date.now()}})}})}async createFactValidationTask(e,t,n={}){let s={name:"FACT_VALIDATION",description:`Validate fact: ${e}`,tags:["fact-validation"],metadata:{fact:e,source:t,requiresConfirmation:n.requiresConfirmation,scheduledFor:n.deferred?Date.now()+36e5:void 0}};return this.runtime.createTask(s)}async createAIInteractionTask(e,t,n){let s=ge(),a={id:s,name:`AI_INTERACTION_${e}`,type:e,interval:t,lastRun:Date.now(),handler:n||(()=>Promise.resolve())};return this.tasks.set(s,a),T.debug(`[AlfaFrensTaskManager] Created ${e} task with interval ${t}ms`),this.isRunning&&this.startTaskInterval(a),a}async start(){if(!this.isRunning){this.isRunning=!0,T.debug("[AlfaFrensTaskManager] Starting task manager");for(let e of this.tasks.values())this.startTaskInterval(e)}}async stop(){if(this.isRunning){this.isRunning=!1,T.debug("[AlfaFrensTaskManager] Stopping task manager");for(let[e,t]of this.intervals.entries())clearInterval(t),this.intervals.delete(e)}}async processTasks(){T.debug(`[AlfaFrensTaskManager] Processing ${this.tasks.size} tasks`);for(let e of this.tasks.values())try{await e.handler(),e.lastRun=Date.now()}catch(t){T.error(`[AlfaFrensTaskManager] Error processing task ${e.name}:`,t)}}startTaskInterval(e){this.intervals.has(e.id)&&clearInterval(this.intervals.get(e.id));let t=setInterval(async()=>{try{await e.handler(),e.lastRun=Date.now()}catch(n){T.error(`[AlfaFrensTaskManager] Error in task ${e.name}:`,n)}},e.interval);this.intervals.set(e.id,t),T.debug(`[AlfaFrensTaskManager] Started interval for task ${e.name}`)}};function Fe(r,e,t="ALFAFRENS_MODEL_CLASS"){return b(r.getSetting(e))||b(r.getSetting(t))}function de(r,e,t){let n={evaluation:ae,response:re,post:U},s={evaluation:"ALFAFRENS_EVALUATION_MODEL_CLASS",response:"ALFAFRENS_RESPONSE_MODEL_CLASS",post:"ALFAFRENS_POST_MODEL_CLASS"};return{template:r[`${t}Template`]||n[t],modelClass:r.modelClass||Fe(e,s[t])}}var x=class{constructor(e,t,n={}){this.isRunning=!1;this.messageHistory=[];this.lastProcessedTime=Date.now();this.pollIntervalId=null;this.postIntervalId=null;this.sentMessageIds=new Set;i.debug("[AlfaFrensAIInteraction] constructor called"),this.client=e,this.runtime=t,this.options=n,this.factValidationManager=new R(t),this.taskManager=new P(t)}async start(e){if(i.debug("[AlfaFrensAIInteraction] start called with intervalSeconds:",e),this.isRunning){i.debug("[AlfaFrensAIInteraction] already running, returning early");return}this.isRunning=!0;let t=e||this.options.intervalSeconds||C(this.runtime,"ALFAFRENS_POLL_INTERVAL_SECONDS",30);if(i.debug("[AlfaFrensAIInteraction] using interval:",t,"seconds"),i.info(`[AlfaFrensAIInteraction] Starting AI interaction manager with interval: ${t}s`),this.pollIntervalId=setInterval(()=>{i.debug("[AlfaFrensAIInteraction] Poll interval triggered"),this.processMessages().catch(n=>{i.error("[AlfaFrensAIInteraction] Error processing messages:",n)})},t*1e3),await this.processMessages().catch(n=>{i.error("[AlfaFrensAIInteraction] Error in initial message processing:",n)}),this.client.config.enablePost){let n=Math.floor(Math.random()*(this.client.config.postIntervalMax-this.client.config.postIntervalMin)+this.client.config.postIntervalMin);i.debug(`[AlfaFrensAIInteraction] Setting up post interval: ${n}s`),this.postIntervalId=setInterval(()=>{i.debug("[AlfaFrensAIInteraction] Post interval triggered"),this.createPost().catch(s=>{i.error("[AlfaFrensAIInteraction] Error creating post:",s)})},n*1e3)}i.info("[AlfaFrensAIInteraction] Started successfully")}async stop(){if(!this.isRunning){i.debug("[AlfaFrensAIInteraction] already stopped");return}i.info("[AlfaFrensAIInteraction] Stopping AI interaction manager"),this.isRunning=!1,this.pollIntervalId&&(clearInterval(this.pollIntervalId),this.pollIntervalId=null),this.postIntervalId&&(clearInterval(this.postIntervalId),this.postIntervalId=null)}async processMessages(){i.debug(`[AlfaFrensAIInteraction.processMessages] Starting ${Date.now()}`),i.debug(`Client polling state: isRunning=${this.isRunning}`);try{if(!this.isRunning){i.debug("[AlfaFrensAIInteraction.processMessages] Not running, skipping message processing");return}i.debug(`[AlfaFrensAIInteraction.processMessages] Current lastProcessedTime: ${this.lastProcessedTime}`);let e=Date.now();i.debug(`[AlfaFrensAIInteraction.processMessages] Fetching messages since ${this.lastProcessedTime}`),i.debug(`[AlfaFrensAIInteraction.processMessages] About to call client.getMessages for room ${this.client.config.channelId}`);let t=await this.client.getMessages({roomId:this.client.config.channelId,since:this.lastProcessedTime,includeReactions:!1,includeReplies:!1});if(i.debug(`[AlfaFrensAIInteraction.processMessages] Retrieved ${t.length} messages`),t.length===0){i.debug("[AlfaFrensAIInteraction.processMessages] No new messages to process");return}i.debug(`[AlfaFrensAIInteraction.processMessages] Updating message history, current length: ${this.messageHistory.length}`),this.messageHistory=this.messageHistory.concat(t).slice(-50),i.debug(`[AlfaFrensAIInteraction.processMessages] New history length: ${this.messageHistory.length}`);let n=t[t.length-1].timestamp;this.lastProcessedTime=new Date(n).getTime()+1,i.debug(`[AlfaFrensAIInteraction.processMessages] New lastProcessedTime: ${this.lastProcessedTime}`);let s=10,a=[];for(let g=0;g<t.length;g+=s)a.push(t.slice(g,g+s));i.debug(`[AlfaFrensAIInteraction.processMessages] Processing ${a.length} message batches`);for(let g of a){i.debug(`[AlfaFrensAIInteraction.processMessages] Processing batch of ${g.length} messages`);try{await this.processMessageBatch(g)}catch(y){i.error(`[AlfaFrensAIInteraction.processMessages] Error processing batch: ${y instanceof Error?y.message:String(y)}`)}}let c=Date.now()-e;i.debug(`[AlfaFrensAIInteraction.processMessages] Processing completed in ${c}ms`)}catch(e){i.error(`[AlfaFrensAIInteraction.processMessages] ERROR: ${e instanceof Error?e.message:String(e)}`),e instanceof Error&&e.stack&&i.error(`[AlfaFrensAIInteraction.processMessages] Stack: ${e.stack}`)}finally{i.debug(`[AlfaFrensAIInteraction.processMessages] Completed ${Date.now()}`)}}async processMessageBatch(e){for(let t of e){if(i.debug(`[AlfaFrensAIInteraction.processMessageBatch] Processing message: ${t.id}`),i.debug(`[AlfaFrensAIInteraction.processMessageBatch] Message sender: ${t.senderId}, our userId: ${this.client.config.userId}`),i.debug(`[AlfaFrensAIInteraction.processMessageBatch] Message username: ${t.senderUsername}, our username: ${this.client.config.username}`),this.sentMessageIds.has(t.id)){i.debug("[AlfaFrensAIInteraction.processMessageBatch] Skipping our own message (ID match)");continue}if(t.senderId===this.client.config.userId){i.debug("[AlfaFrensAIInteraction.processMessageBatch] Skipping message from our user ID");continue}let n=t.senderUsername?.replace("@","")||"",s=this.client.config.username?.replace("@","")||"";if(n&&s&&n===s){i.debug(`[AlfaFrensAIInteraction.processMessageBatch] Skipping message from our normalized username: ${t.senderUsername} matches ${this.client.config.username}`);continue}let a=O({roomId:he(this.client.config.channelId),senderId:he(t.senderId||"user"),runtime:this.runtime,message:t,isBotMessage:!1});try{await this.runtime.messageManager.createMemory(a),i.debug("[AlfaFrensAIInteraction.processMessageBatch] Stored message in memory manager")}catch(c){i.error("[AlfaFrensAIInteraction.processMessageBatch] Failed to store message in memory:",c)}let o=de(this.options,this.runtime,"evaluation");i.debug(`[AlfaFrensAIInteraction.processMessageBatch] Evaluating message with template length ${o.template.length}`);try{if(!await ie(this.runtime,t,{template:o.template,modelClass:o.modelClass})){i.debug("[AlfaFrensAIInteraction.processMessageBatch] Decided not to respond to message");continue}i.debug("[AlfaFrensAIInteraction.processMessageBatch] Generating response to message");let g=de(this.options,this.runtime,"response"),y=await $(this.runtime,this.client,t.content||"",this.messageHistory.slice(-10),g.template,g.modelClass);i.debug(`[AlfaFrensAIInteraction.processMessageBatch] Sending response: ${y.substring(0,50)}...`);try{let u=await this.client.sendMessage({content:y,roomId:this.client.config.channelId,inReplyTo:t.id});u&&u.length>0&&u[0].message&&u[0].message.id&&(this.sentMessageIds.add(u[0].message.id),i.debug(`[AlfaFrensAIInteraction.processMessageBatch] Tracked our sent message ID: ${u[0].message.id}`)),i.debug("[AlfaFrensAIInteraction.processMessageBatch] Response sent successfully")}catch(u){i.error("[AlfaFrensAIInteraction.processMessageBatch] Failed to send response:",u)}}catch(c){i.error("[AlfaFrensAIInteraction.processMessageBatch] Error processing message:",c)}}}formatConversationHistory(){if(this.messageHistory.length===0)return"No previous messages.";let e=C(this.runtime,"ALFAFRENS_HISTORY_COUNT",5);return this.messageHistory.slice(-e).map(n=>`${n.senderId===this.client.config.userId?"ASSISTANT":`USER (${n.senderUsername})`}: ${n.content}`).join(`

`)}async createPost(e){try{i.info("[AlfaFrensAIInteraction] Starting post creation");let t=e||await this.generatePostContent();i.info("[AlfaFrensAIInteraction] Generated post content:",{contentLength:t.length,content:t});let n=t,s=await this.client.createPost({content:n,roomId:this.client.config.channelId});return s&&s.length>0&&s[0].message&&s[0].message.id&&(this.sentMessageIds.add(s[0].message.id),i.debug(`[AlfaFrensAIInteraction] Tracked our sent post ID: ${s[0].message.id}`)),i.info("[AlfaFrensAIInteraction] Post created successfully:",{messageId:s[0].message.id,timestamp:s[0].message.timestamp}),s}catch(t){throw i.error("[AlfaFrensAIInteraction] Failed to create post:",t),t}}async generatePostContent(e){let t=e?{template:e,modelClass:Fe(this.runtime,"ALFAFRENS_POST_MODEL_CLASS")}:de(this.options,this.runtime,"post");return E(this.runtime,t)}async extractFacts(e){let t=`Extract factual statements from this text. Return them as a JSON array of strings.
        Only include clear, factual statements, not opinions or subjective content.
        
        Text: "${e}"
        
        Example response:
        ["John lives in New York", "The company was founded in 2020"]
        `;try{let n=await _e({runtime:this.runtime,context:t,modelClass:Le.SMALL}),s=JSON.parse(n);return Array.isArray(s)?s:(i.error("[AlfaFrensAIInteraction] Invalid fact extraction result:",n),[])}catch(n){return i.error("[AlfaFrensAIInteraction] Failed to extract facts:",n),[]}}};l.debug("Initializing AlfaFrens client");var ue=class{constructor(e){this.aiInteraction=null;this.isRunning=!1;this.lastProcessedTime=0;this.name="alfafrens";this.description="AlfaFrens client manager";if(l.debug("[AlfaFrensManager] Initializing with runtime"),this.runtime=e,this.config={apiKey:e.getSetting("ALFAFRENS_API_KEY")||"",userId:e.getSetting("ALFAFRENS_USER_ID")||"",channelId:e.getSetting("ALFAFRENS_CHANNEL_ID"),username:e.getSetting("ALFAFRENS_USERNAME")||"AI Assistant",pollInterval:parseInt(e.getSetting("ALFAFRENS_POLL_INTERVAL")||"15"),enablePost:e.getSetting("ALFAFRENS_ENABLE_POST")==="true",postIntervalMin:parseInt(e.getSetting("ALFAFRENS_POST_INTERVAL_MIN")||"3600"),postIntervalMax:parseInt(e.getSetting("ALFAFRENS_POST_INTERVAL_MAX")||"7200")},!this.config.apiKey)throw new Error("AlfaFrens API key is required");this.api=new N(this.config.apiKey,this.config.channelId),this.generationConfig=B(e),this.aiInteraction=new x(this,e,{evaluationTemplate:this.generationConfig.evaluation.template,responseTemplate:this.generationConfig.response.template,modelClass:this.generationConfig.response.modelClass,intervalSeconds:this.config.pollInterval,postTemplate:this.generationConfig.post.template,generationConfig:this.generationConfig}),l.debug("[AlfaFrensManager] Initialized successfully")}async initialize(e){if(l.debug("AlfaFrensManager.initialize called"),this.isRunning){l.debug("AlfaFrensManager already running, returning early"),l.warn("[AlfaFrensManager] Already running");return}l.info("[AlfaFrensManager] Starting AlfaFrens client"),this.isRunning=!0;try{l.debug("AlfaFrensManager getting last processed time from cache");let t=await this.runtime.cacheManager.get("alfafrens_last_processed_time");this.lastProcessedTime=t||Date.now()-5*60*1e3,l.debug("AlfaFrensManager lastProcessedTime set to:",this.lastProcessedTime);let{registerAlfaFrensActions:n}=await Promise.resolve().then(()=>(fe(),Ie));n(this,e),l.debug("AlfaFrensManager registered actions with ElizaOS"),l.debug("AlfaFrensManager starting aiInteraction with poll interval:",this.config.pollInterval),await this.aiInteraction?.start(this.config.pollInterval),l.debug("AlfaFrensManager aiInteraction.start completed"),l.info("[AlfaFrensManager] Making initial post..."),await this.sendMessage({content:"Hey AlfaFrens! I'm back online and ready to help with your questions. Feel free to ask anything!",roomId:this.config.channelId}),l.info("[AlfaFrensManager] Initial post sent successfully")}catch(t){throw l.error("[AlfaFrensManager] ERROR in AlfaFrensManager.initialize:",t),l.error("[AlfaFrensManager] Failed to start:",t),this.isRunning=!1,t}}async stop(e){if(!this.isRunning){l.warn("[AlfaFrensManager] Not running");return}l.info("[AlfaFrensManager] Stopping AlfaFrens client"),this.isRunning=!1;try{await this.runtime.cacheManager.set("alfafrens_last_processed_time",this.lastProcessedTime),await this.aiInteraction?.stop()}catch(t){throw l.error("[AlfaFrensManager] Failed to stop:",t),t}}async getMessages(e){try{return await this.api.getMessages({since:e.since,until:e.until,includeReactions:e.includeReactions,includeReplies:e.includeReplies})}catch(t){throw l.error("[AlfaFrensManager] Error getting messages:",t),t}}prepareMessageAndMemory(e,t,n){let s=ke(e,t);return s.senderId=this.config.userId,s.senderUsername=this.config.username||"AI Assistant",{memory:O({roomId:Oe(n),senderId:this.runtime.agentId,runtime:this.runtime,message:s,isBotMessage:!0}),message:s}}async sendMessage(e){try{l.debug("[AlfaFrensManager] Sending message:",{contentLength:e.content.length,roomId:e.roomId,inReplyTo:e.inReplyTo});let t;e.inReplyTo?t=await this.api.replyMessage(e.content,e.inReplyTo):t=await this.api.sendMessage(e.content);let n=this.prepareMessageAndMemory(t,e.content,e.roomId);return l.debug("[AlfaFrensManager] Message sent successfully"),[n]}catch(t){throw l.error("[AlfaFrensManager] Failed to send message:",t),t}}async createPost(e){try{l.debug("[AlfaFrensManager] Creating post:",{contentLength:e.content.length,roomId:e.roomId});let t=await this.api.createPost(e.content),n=this.prepareMessageAndMemory(t,e.content,e.roomId);return l.debug("[AlfaFrensManager] Post created successfully"),[n]}catch(t){throw l.error("[AlfaFrensManager] Failed to create post:",t),t}}async searchKnowledge(e,t=5){try{return await this.runtime.ragKnowledgeManager.getKnowledge({query:e,limit:t,agentId:this.runtime.agentId})}catch(n){return l.error("[AlfaFrensManager] Error searching knowledge:",n),[]}}async getKnowledgeContext(e){try{let t=await this.searchKnowledge(e);return t&&t.length>0?t.map(n=>n.content).join(`

`):""}catch(t){return l.error("[AlfaFrensManager] Error getting knowledge context:",t),""}}},J={name:"alfafrens",async start(r){l.debug("AlfaFrensClientInterface.start called"),l.info("[AlfaFrensClient] Starting client");let e=new ue(r);return l.debug("AlfaFrensClientInterface created new AlfaFrensManager instance"),await e.initialize(r),l.debug("AlfaFrensClientInterface called initialize on manager"),e}};function ke(r,e){return{id:r.messageId,timestamp:r.timestamp,content:e,senderId:"",senderUsername:""}}import{elizaLogger as Me}from"@elizaos/core";import{elizaLogger as L}from"@elizaos/core";var Ue={name:"ALFAFRENS_SEND_MESSAGE",description:"sends a message to the AlfaFrens channel",similes:["send","message","chat","respond"],examples:[[{user:"user",content:{text:"send a message to AlfaFrens",action:"ALFAFRENS_SEND_MESSAGE"}}]],validate:async(r,e)=>e.content?.text?!0:(L.error("[AlfaFrens] message content is missing"),!1),handler:async(r,e)=>{let t=e.content,n=r.clients.find(s=>s.constructor.name==="AlfaFrensManager");if(!n)return L.error("[AlfaFrens] client not found"),!1;try{return await n.sendMessage({content:t.text,roomId:n.config.channelId}),!0}catch(s){return L.error("[AlfaFrens] failed to send message:",s),!1}}},$e={name:"ALFAFRENS_CREATE_POST",description:"creates a new post in the AlfaFrens channel",similes:["post","share","announce","publish"],examples:[[{user:"user",content:{text:"create a post in AlfaFrens",action:"ALFAFRENS_CREATE_POST"}}]],validate:async(r,e)=>e.content?.text?!0:(L.error("[AlfaFrens] post content is missing"),!1),handler:async(r,e)=>{let t=e.content,n=r.clients.find(s=>s.constructor.name==="AlfaFrensManager");if(!n)return L.error("[AlfaFrens] client not found"),!1;try{return await n.createPost({content:t.text,roomId:n.config.channelId}),!0}catch(s){return L.error("[AlfaFrens] failed to create post:",s),!1}}},pe=[Ue,$e];Me.debug("[AlfaFrensPlugin] Initializing plugin");var De={name:"alfafrens",description:"AlfaFrens client plugin",clients:[J],actions:pe};Me.debug("[AlfaFrensPlugin] Plugin initialized");var ye=De;var Se={};X(Se,{AlfaFrensAIInteraction:()=>x,AlfaFrensAIPost:()=>K,createAlfaFrensActions:()=>q,registerAlfaFrensActions:()=>me,utils:()=>oe});D();import{elizaLogger as M}from"@elizaos/core";var K=class{constructor(e,t,n={}){this.isRunning=!1;this.lastPostTime=0;this.client=e,this.runtime=t,this.options=n,this.taskManager=new P(t)}async start(e){if(this.isRunning){M.debug("[AlfaFrensAIPost] already running, returning early");return}this.isRunning=!0;let t=e||this.options.intervalSeconds||C(this.runtime,"ALFAFRENS_POST_INTERVAL_SECONDS",3600);M.debug("[AlfaFrensAIPost] using interval:",t,"seconds"),M.info(`[AlfaFrensAIPost] Starting AI post generator with interval: ${t}s`),await this.taskManager.createAIInteractionTask("POST",t*1e3)}async stop(){if(!this.isRunning){M.debug("[AlfaFrensAIPost] already stopped");return}M.info("[AlfaFrensAIPost] Stopping AI post generator"),this.isRunning=!1,await this.taskManager.processTasks()}async createPost(e){try{M.info("[AlfaFrensAIPost] Starting post creation");let t=e||await this.generatePostContent();M.info("[AlfaFrensAIPost] Generated post content:",{contentLength:t.length,content:t});let n=t,s=await this.client.createPost({content:n,roomId:this.client.config.channelId});return M.info("[AlfaFrensAIPost] Post created successfully:",{messageId:s[0].message.id,timestamp:s[0].message.timestamp}),s}catch(t){throw M.error("[AlfaFrensAIPost] Failed to create post:",t),t}}async generatePostContent(e){let t={template:e||this.options.postTemplate||U,modelClass:this.options.modelClass||b(this.runtime.getSetting("ALFAFRENS_POST_MODEL_CLASS"))};return E(this.runtime,t)}};fe();D();var An=ye,hn=J;export{N as AlfaFrensApi,hn as AlfaFrensClient,J as AlfaFrensClientInterface,Se as Extensions,pe as alfaFrensActions,O as createAlfaFrensMemory,An as default};
//# sourceMappingURL=index.js.map